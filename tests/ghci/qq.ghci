:m +Data.Int
-- Should be: [1] 1
H.print =<< [r| 1 |]

-- Should be: [1] 2
H.print =<< [r| 1 + 1 |]

-- Should be: [1] "1" "2" "3"
H.print =<< [r| c(1,2,"3") |] :: IO ()

-- Should be: [1] 2
H.print =<< [r| x <- 2 |] :: IO ()

-- Should be: [1] 3
H.print =<< [r| x+1 |]

---- Should be: [1] 6
let y = (5::Double)
H.print =<< [r| y_hs + 1 |]

---- Should be: Closure ???
H.print =<< [r| function(y) y_hs + y |]

-- Should be 8
H.print =<< [r| z <- function(y) y_hs + y |]
H.print =<< [r| z(3) |]

-- Should be [1] 1 2 3 4 5 6 7 8 9 10
H.print =<< [r| y <- c(1:10) |]
let foo1 = (\x -> (return $ x+1 :: IO Double))
let foo2 = (\x -> (return $ map (+1) x :: IO [Int32]))

-- Should be [1] 2
H.print =<< [r| (function(x).Call(foo1_hs,x))(2) |]

-- Should be [1] 2 3 4 5 6 7 8 9 10 11
H.print =<< [r| (function(x).Call(foo2_hs,x))(y) |]

-- Should be [1] 43
H.print =<< [r| x <- 42 ; x + 1 |]

-- Should be [1] 1 2 3
let xs = [1,2,3]::[Double]
H.print =<< [r| xs_hs |]

-- Should be [1] 8
H.print =<< [r| foo1_hs(7) |]

-- Should be NULL
H.runInRThread (H.runInRThread $ H.print H.nilValue)

-- Should be [1] 3
let foo3 = (\n -> fmap H.fromSEXP [r| n_hs |]) :: Int32 -> IO Int32
H.print =<< [r| foo3_hs(as.integer(3)) |]

-- Should be [1] 120 but it doesn't work
-- let fact n = if n == (0 :: Int32) then (return 1 :: IO Int32) else fmap H.fromSEXP [r| as.integer(n_hs * fact_hs(n_hs - 1)) |]
-- H.print =<< [r| fact_hs(as.integer(5)) |]
