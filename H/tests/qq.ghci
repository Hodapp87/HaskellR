:set -XScopedTypeVariables
:m +Data.Int
import qualified Foreign.R as R
import Control.Applicative ((<$>))

-- Should be: [1] 1
p [r| 1 |]

-- Should be: [1] 2
p [r| 1 + 2 |]

-- Should be: [1] "1" "2" "3"
p [r| c(1,2,"3") |] :: IO ()

-- Should be: [1] 2
p [r| x <<- 2 |] :: IO ()

-- Should be: [1] 3
p [r| x+1 |]

---- Should be: [1] 6
let y = (5::Double)
p [r| y_hs + 1 |]

-- Printing of functions gives non deterministic output (env names change).
--p [r| function(y) y_hs + y |]

-- Should be 8
p [r| z <- function(y) y_hs + y; z(3) |]

-- Should be [1] 1 2 3 4 5 6 7 8 9 10
p [r| y <<- c(1:10) |]
let foo1 = (\x -> (return $ x+1 :: R s Double))
let foo2 = (\x -> (return $ map (+1) x :: R s [Int32]))

-- Should be [1] 2
p [r| mapply(foo1_hs, 2) |]

-- Should be [1] 2 3 4 5 6 7 8 9 10 11
p [r| mapply(foo2_hs, y) |]

-- Should be [1] 43
p [r| x <<- 42 ; x + 1 |]

-- Should be [1] 1 2 3
let xs = [1,2,3]::[Double]
p [r| xs_hs |]

-- Should be [1] 8
p [r| foo1_hs(7) |]

-- Should be NULL
p (return nilValue)

-- Should be [1] 3
let foo3 = (\n -> fmap fromSomeSEXP [r| n_hs |]) :: Int32 -> R s Int32
p [r| foo3_hs(3L) |]

-- | should be 3
let foo4 = (\n m -> return $ n + m) :: Double -> Double -> R s Double
p [r| foo4_hs(33, 66) |]

-- Should be [1] 120 but it doesn't work
let fact n = if n == (0 :: Int32) then (return 1 :: R s Int32) else fmap fromSomeSEXP [r| as.integer(n_hs * fact_hs(n_hs - 1L)) |]
p [r| fact_hs(5L) |]

-- Should be [1] 29
let foo5  = (\n -> return (n+1)) :: Int32 -> R s Int32
let apply = (\n m -> [r| n_hs(m_hs) |]) :: SEXP s 'R.Closure -> Int32 -> R s (R.SomeSEXP s)
p [r| apply_hs(foo5_hs, 28L ) |]

p $ install "blah"

:{
let hFib :: SEXP s 'R.Int -> R s (SEXP s 'R.Int)
    hFib n@(fromSEXP -> 0 :: Int32) = fmap (flip R.asTypeOf n) [r| 0L |]
    hFib n@(fromSEXP -> 1 :: Int32) = fmap (flip R.asTypeOf n) [r| 1L |]
    hFib n = (`R.asTypeOf` n) <$> [r| hFib_hs(n_hs - 1L) + hFib_hs(n_hs - 2L) |]
:}

-- Should be [1] 4181
-- p Prelude.runR defaultConfig (hFib (Prelude.mkSEXP (19 :: Int32))) -- XXX produces wrong result.

-- s4 objects test
-- Create an S4 class
p [r| setClass("x-test",representation(a = "numeric", b = "numeric"), prototype(a=1,b=2)) |]
-- instantiate and object in R
p [r| x <<- new("x-test") |]
-- instantiate and object and pass it to H as-is
x <- [r| new("x-test") |]
p (return x)
-- Should be 1. Use slot accessor on R object.
p [r| x@a |]
-- Should be 2. Use slot accessor on H object.
p [r| x_hs@b |]
-- Should be "S4". Get type of R object.
p [r| typeof(x) |]
-- Should be "S4". Get type of H object.
p [r| typeof(x_hs) |]

:{
let testpm :: SomeSEXP s -> IO ()
    testpm (SomeSEXP z@(hexp -> S4 _))
      | R.TRUE <- dynSEXP [rsafe| z_hs @ a > 0 |] = p (return z)
      | otherwise = print "unexpected value"
:}

testpm x

-- Should be "S4". Get type of H object.
-- XXX This is a workaround to avoid the test hanging on windows.
-- For some reason, if the output of ghci is redirected and the last
-- command in the test is `testpm x`, then ghci executes all commands
-- but does not produce any R output and seems to block forever.
p [r| typeof(x_hs) |]
